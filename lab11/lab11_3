# -*- coding: utf-8 -*-

from random import randint


from termcolor import cprint


class Man:

    def __init__(self, name):
        self.name = name
        self.fullness = 50
        self.house = None

    def __str__(self):
        return 'Я - {}, сытость {}'.format(
            self.name, self.fullness)

    def eat(self):
        if self.house.food >= 10:
            cprint('{} поел'.format(self.name), color='yellow')
            self.fullness += 10
            self.house.food -= 10
        else:
            cprint('{} нет еды'.format(self.name), color='red')

    def work(self):
        cprint('{} сходил на работу'.format(self.name), color='blue')
        self.house.money += 150
        self.fullness -= 10

    def watch_MTV(self):
        cprint('{} смотрел MTV целый день'.format(self.name), color='green')
        self.fullness -= 10

    def shopping_for_man(self):
        if self.house.money >= 50:
            cprint('{} сходил в магазин за едой'.format(self.name), color='magenta')
            self.house.money -= 50
            self.house.food += 50
        else:
            cprint('{} деньги кончились!'.format(self.name), color='red')

    def shopping_for_cat(self):
        if self.house.money >= 50:
            cprint('{} сходил в магазин за едой для кота'.format(self.name), color='magenta')
            self.house.money -= 50
            self.house.cat_food += 50
        else:
            cprint('{} деньги кончились!'.format(self.name), color='red')

    def cleaning(self):
        cprint('{} у брался дома'.format(self.name), color='magenta')
        self.house.dirt -= 100
        self.fullness -= 20

    def go_to_the_house(self, house):
        self.house = house
        self.fullness -= 10
        cprint('{} Вьехал в дом'.format(self.name), color='cyan')

    def pick_up_a_cat(self, house):
        kitty.house = self.house
        cprint('{} подобрал кота {}'.format(self.name, kitty.name), color='cyan')

    def act(self):
        if self.fullness <= 0:
            cprint('{} умер...'.format(self.name), color='red')
            return
        dice = randint(1, 4)
        if self.fullness < 20:
            self.eat()
        elif self.house.food < 10:
            self.shopping_for_man()
        elif self.house.cat_food < 10:
            self.shopping_for_cat()
        elif self.house.money < 50:
            self.work()
        elif self.house.dirt > 100:
            self.cleaning()
        elif dice == 1:
            self.work()
        elif dice == 2:
            self.eat()
        else:
            self.watch_MTV()

class Cat:
    def __init__(self, name):
        self.name = name
        self.cat_fullness = 50
        self.house = None

    def __str__(self):
        return 'Я кот- {}, сытость {}'.format(
            self.name, self.cat_fullness)

    def eat(self):
        if self.house.cat_food >= 10:
            self.cat_fullness += 20
            self.house.cat_food -= 10
            cprint('кот {} поел'.format(self.name), color='yellow')
        else:
            cprint('{} нет кошачьей еды'.format(self.name), color='red')

    def sleep(self):
        cprint('кот {} поспал'.format(self.name), color='blue')
        self.cat_fullness -= 10

    def tear_up_the_wallpaper(self):
        self.cat_fullness -= 10
        self.house.dirt += 5
        cprint('кот {} подрал обои'.format(self.name), color='green')

    def act(self):
        if self.cat_fullness <= 0:
            cprint('кот {} умер...'.format(self.name), color='red')
            return
        elif citisen.fullness <=0:
            cprint('коты остались без хозяина и скоро умрут от голода :_(', color='red')
            return 
        dice = randint(1, 6)
        if self.cat_fullness < 20:
            self.eat()
        elif dice == 1:
            self.tear_up_the_wallpaper()
        elif dice == 2:
            self.eat()
        else:
            self.sleep()


class House :

    def __init__(self):
        self.food = 50
        self.money = 0
        self.cat_food = 50
        self.dirt = 0

    def __str__(self):
        return 'В доме еды осталось {}, денег осталось {}, кошачьей еды {}, грязи {}'.format(
            self.food, self.money, self.cat_food, self.dirt)


my_sweet_home = House()
citisen = Man(name='Минхо')
kitties = [
    Cat(name='Суни'),
    Cat(name='Дуни'),
    Cat(name='Дори')
]

citisen.go_to_the_house(house=my_sweet_home)
for kitty in kitties:
    citisen.pick_up_a_cat(kitty)

for day in range(1, 366):
    print('================ день {} =================='.format(day))
    citisen.act()
    for kitty in kitties:
        kitty.act()
    print('--- в конце дня ---')
    print(citisen)
    for kitty in kitties:
        print(kitty)
    print(my_sweet_home)

# Создадим двух людей, живущих в одном доме - Бивиса и Батхеда
# Нужен класс Дом, в нем должн быть холодильник с едой и тумбочка с деньгами
# Еда пусть хранится в холодильнике в доме, а деньги - в тумбочке.
